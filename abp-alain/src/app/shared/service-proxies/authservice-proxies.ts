/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';

import * as moment from 'moment';

export const AUTHAPI_BASE_URL = new InjectionToken<string>('AUTHAPI_BASE_URL');

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTHAPI_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 登录认证
     * @req (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    signIn(req: SignInRequest | null | undefined, authorization: string): Observable<JsonResponseBaseOfJObject> {
        let url_ = this.baseUrl + "/AuthService/SignIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processSignIn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignIn(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBaseOfJObject>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBaseOfJObject>><any>Observable.throw(response_);
        });
    }

    protected processSignIn(response: HttpResponseBase): Observable<JsonResponseBaseOfJObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBaseOfJObject.fromJS(resultData200) : new JsonResponseBaseOfJObject();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBaseOfJObject>(<any>null);
    }

    /**
     * 登出（注销）
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    signOut(authorization: string): Observable<JsonResponseBase> {
        let url_ = this.baseUrl + "/AuthService/SignOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processSignOut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignOut(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBase>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBase>><any>Observable.throw(response_);
        });
    }

    protected processSignOut(response: HttpResponseBase): Observable<JsonResponseBase> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBase.fromJS(resultData200) : new JsonResponseBase();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBase>(<any>null);
    }

    /**
     * 应用跳转。（当持有一个原来的令牌后，跳转到其他应用）
     * @req (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    redirectApp(req: RedirectAppRequest | null | undefined, authorization: string): Observable<JsonResponseBaseOfJObject> {
        let url_ = this.baseUrl + "/AuthService/RedirectApp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processRedirectApp(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRedirectApp(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBaseOfJObject>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBaseOfJObject>><any>Observable.throw(response_);
        });
    }

    protected processRedirectApp(response: HttpResponseBase): Observable<JsonResponseBaseOfJObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBaseOfJObject.fromJS(resultData200) : new JsonResponseBaseOfJObject();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBaseOfJObject>(<any>null);
    }

    /**
     * 通过Refresh_Token刷新Access_Token
     * @req (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    refreshToken(req: RefreshTokenRequest | null | undefined, authorization: string): Observable<void> {
        let url_ = this.baseUrl + "/AuthService/RefreshToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processRefreshToken(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshToken(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRefreshToken(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ClientResourceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTHAPI_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 添加应用客户端
     * @req (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    addClient(req: AddClientRequest | null | undefined, authorization: string): Observable<JsonResponseBase> {
        let url_ = this.baseUrl + "/api/ClientResource/AddClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processAddClient(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClient(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBase>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBase>><any>Observable.throw(response_);
        });
    }

    protected processAddClient(response: HttpResponseBase): Observable<JsonResponseBase> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBase.fromJS(resultData200) : new JsonResponseBase();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBase>(<any>null);
    }

    /**
     * 添加服务Api接口资源
     * @resource (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    addApiResource(resource: AddApiResourceRequest | null | undefined, authorization: string): Observable<JsonResponseBase> {
        let url_ = this.baseUrl + "/api/ClientResource/AddApiResource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resource);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processAddApiResource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResource(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBase>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBase>><any>Observable.throw(response_);
        });
    }

    protected processAddApiResource(response: HttpResponseBase): Observable<JsonResponseBase> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBase.fromJS(resultData200) : new JsonResponseBase();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBase>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTHAPI_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 修改密码
     * @req (optional) 
     * @authorization please add Bearer access-token when invoking api resource
     * @return Success
     */
    pwdChanged(req: PasswordChangedRequest | null | undefined, authorization: string): Observable<JsonResponseBase> {
        let url_ = this.baseUrl + "/api/User/PwdChanged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPwdChanged(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPwdChanged(<any>response_);
                } catch (e) {
                    return <Observable<JsonResponseBase>><any>Observable.throw(e);
                }
            } else
                return <Observable<JsonResponseBase>><any>Observable.throw(response_);
        });
    }

    protected processPwdChanged(response: HttpResponseBase): Observable<JsonResponseBase> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JsonResponseBase.fromJS(resultData200) : new JsonResponseBase();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JsonResponseBase>(<any>null);
    }
}

export class SignInRequest implements ISignInRequest {
    clientId!: string | undefined;
    clientSecret!: string | undefined;
    tenant!: string | undefined;
    signName!: string | undefined;
    password!: string | undefined;
    grantType!: string | undefined;

    constructor(data?: ISignInRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            this.clientSecret = data["clientSecret"];
            this.tenant = data["tenant"];
            this.signName = data["signName"];
            this.password = data["password"];
            this.grantType = data["grantType"];
        }
    }

    static fromJS(data: any): SignInRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignInRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        data["tenant"] = this.tenant;
        data["signName"] = this.signName;
        data["password"] = this.password;
        data["grantType"] = this.grantType;
        return data; 
    }
}

export interface ISignInRequest {
    clientId: string | undefined;
    clientSecret: string | undefined;
    tenant: string | undefined;
    signName: string | undefined;
    password: string | undefined;
    grantType: string | undefined;
}

export class JsonResponseBaseOfJObject implements IJsonResponseBaseOfJObject {
    success!: boolean | undefined;
    result!: string | undefined;
    data!: any | undefined;

    constructor(data?: IJsonResponseBaseOfJObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.result = data["result"];
            if (data["data"]) {
                this.data = {};
                for (let key in data["data"]) {
                    if (data["data"].hasOwnProperty(key))
                        this.data[key] = data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): JsonResponseBaseOfJObject {
        data = typeof data === 'object' ? data : {};
        let result = new JsonResponseBaseOfJObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["result"] = this.result;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    data["data"][key] = this.data[key];
            }
        }
        return data; 
    }
}

export interface IJsonResponseBaseOfJObject {
    success: boolean | undefined;
    result: string | undefined;
    data: any | undefined;
}

export class JsonResponseBase implements IJsonResponseBase {
    success!: boolean | undefined;
    result!: string | undefined;

    constructor(data?: IJsonResponseBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.result = data["result"];
        }
    }

    static fromJS(data: any): JsonResponseBase {
        data = typeof data === 'object' ? data : {};
        let result = new JsonResponseBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["result"] = this.result;
        return data; 
    }
}

export interface IJsonResponseBase {
    success: boolean | undefined;
    result: string | undefined;
}

export class RedirectAppRequest implements IRedirectAppRequest {
    clientId!: string | undefined;
    clientSecret!: string | undefined;

    constructor(data?: IRedirectAppRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            this.clientSecret = data["clientSecret"];
        }
    }

    static fromJS(data: any): RedirectAppRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RedirectAppRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        return data; 
    }
}

export interface IRedirectAppRequest {
    clientId: string | undefined;
    clientSecret: string | undefined;
}

export class RefreshTokenRequest implements IRefreshTokenRequest {
    clientId!: string | undefined;
    clientSecret!: string | undefined;
    refreshToken!: string | undefined;

    constructor(data?: IRefreshTokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            this.clientSecret = data["clientSecret"];
            this.refreshToken = data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        data["refreshToken"] = this.refreshToken;
        return data; 
    }
}

export interface IRefreshTokenRequest {
    clientId: string | undefined;
    clientSecret: string | undefined;
    refreshToken: string | undefined;
}

export class AddClientRequest implements IAddClientRequest {
    clientId!: string | undefined;
    clientName!: string | undefined;
    clientSecrets!: string[] | undefined;
    allowedScopes!: string[] | undefined;
    accessTokenLifetime!: number | undefined;
    allowedGrantTypes!: string[] | undefined;

    constructor(data?: IAddClientRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            this.clientName = data["clientName"];
            if (data["clientSecrets"] && data["clientSecrets"].constructor === Array) {
                this.clientSecrets = [];
                for (let item of data["clientSecrets"])
                    this.clientSecrets.push(item);
            }
            if (data["allowedScopes"] && data["allowedScopes"].constructor === Array) {
                this.allowedScopes = [];
                for (let item of data["allowedScopes"])
                    this.allowedScopes.push(item);
            }
            this.accessTokenLifetime = data["accessTokenLifetime"];
            if (data["allowedGrantTypes"] && data["allowedGrantTypes"].constructor === Array) {
                this.allowedGrantTypes = [];
                for (let item of data["allowedGrantTypes"])
                    this.allowedGrantTypes.push(item);
            }
        }
    }

    static fromJS(data: any): AddClientRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddClientRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        if (this.clientSecrets && this.clientSecrets.constructor === Array) {
            data["clientSecrets"] = [];
            for (let item of this.clientSecrets)
                data["clientSecrets"].push(item);
        }
        if (this.allowedScopes && this.allowedScopes.constructor === Array) {
            data["allowedScopes"] = [];
            for (let item of this.allowedScopes)
                data["allowedScopes"].push(item);
        }
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        if (this.allowedGrantTypes && this.allowedGrantTypes.constructor === Array) {
            data["allowedGrantTypes"] = [];
            for (let item of this.allowedGrantTypes)
                data["allowedGrantTypes"].push(item);
        }
        return data; 
    }
}

export interface IAddClientRequest {
    clientId: string | undefined;
    clientName: string | undefined;
    clientSecrets: string[] | undefined;
    allowedScopes: string[] | undefined;
    accessTokenLifetime: number | undefined;
    allowedGrantTypes: string[] | undefined;
}

export class AddApiResourceRequest implements IAddApiResourceRequest {
    apiName!: string | undefined;
    apiDisplayName!: string | undefined;

    constructor(data?: IAddApiResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.apiName = data["apiName"];
            this.apiDisplayName = data["apiDisplayName"];
        }
    }

    static fromJS(data: any): AddApiResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddApiResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apiName"] = this.apiName;
        data["apiDisplayName"] = this.apiDisplayName;
        return data; 
    }
}

export interface IAddApiResourceRequest {
    apiName: string | undefined;
    apiDisplayName: string | undefined;
}

export class PasswordChangedRequest implements IPasswordChangedRequest {
    tenant!: string | undefined;
    signName!: string | undefined;
    password!: string | undefined;

    constructor(data?: IPasswordChangedRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant = data["tenant"];
            this.signName = data["signName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): PasswordChangedRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordChangedRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant;
        data["signName"] = this.signName;
        data["password"] = this.password;
        return data; 
    }
}

export interface IPasswordChangedRequest {
    tenant: string | undefined;
    signName: string | undefined;
    password: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}